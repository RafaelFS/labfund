; T3G11A03E02_rotinas_13.asm
; Arquivo que contém as rotinas desenvolvidas nas aulas anteriores
				;						&       /0000
;Exportando PACK  ==================================================================
2004 0000 ; "PACK>"		;	PACK        		>           ; Sub-rotina PACK
2000 0000 ; "PACK_VAR1>"		;	PACK_VAR1   		>           ; Endereço da primeira palavra a ser empacotada
2002 0000 ; "PACK_VAR2>"		;	PACK_VAR2   		>           ; Endereço da segunda palabra a ser empacotada

;Exportando UNPACK  =======================================================================
202a 0000 ; "UNPACK>"		;	UNPACK              >
201e 0000 ; "UNPACK_OUT_ADDR1>"		;	UNPACK_OUT_ADDR1  	>	     	; Endereço de saída da primeira palavra 
2020 0000 ; "UNPACK_OUT_ADDR2>"		;	UNPACK_OUT_ADDR2 	>       	; Endereço de saída da segunda palavra 
2022 0000 ; "UNPACK_PACKAGE>"		;	UNPACK_PACKAGE     	>         	; Word empacotada

;Exportando MEMCOPY =======================================================================
2094 0000 ; "MEMCOPY>"		;	MEMCOPY             >
2080 0000 ; "MEMCOPY_NWORDS>"		;	MEMCOPY_NWORDS 		> 			; Número de palavras a serem copiadas (cópia da subrotina)
2082 0000 ; "MEMCOPY_END_ORIGEM>"		;	MEMCOPY_END_ORIGEM	>			; Endereço inicial da sequência de origem (cópia da subrotina)
2084 0000 ; "MEMCOPY_END_DESTINO>"		;	MEMCOPY_END_DESTINO	>			; Endereço inicial da sequência de destino (cópia da subrotina)

; Exportando CHTOI  =======================================================================
20fc 0000 ; "CHTOI>"		;	CHTOI				>
20ea 0000 ; "CHTOI_IN1>"		;	CHTOI_IN1		 	>           ; Endereço de entrada da primeira palavra
20ec 0000 ; "CHTOI_IN2>"		;	CHTOI_IN2 			>       	; Endereço de entrada da segunda palavra
20ee 0000 ; "CHTOI_WORD>"		;	CHTOI_WORD	     	>       	; Word final
20f0 0000 ; "CHTOI_AUX>"		;	CHTOI_AUX 			>
20f2 0000 ; "CHTOI_D>"		;	CHTOI_D 			>
20f4 0000 ; "CHTOI_D1>"		;	CHTOI_D1          	>       	; Digito 1 
20f6 0000 ; "CHTOI_D2>"		;	CHTOI_D2  	     	>       	; Digito 2 
20f8 0000 ; "CHTOI_D3>"		;	CHTOI_D3  	     	>       	; Digito 3 
20fa 0000 ; "CHTOI_D4>"		;	CHTOI_D4  	     	>       	; Digito 4 

;Importando constantes ===========================================================
4000 0000 ; "SHIFT2<"		;	SHIFT2	    		<           ; Constante que desloca em 2 posições os bits das palavras
4001 0000 ; "LD_VAZIA<"		;	LD_VAZIA     		<           ; Instrução
4002 0000 ; "TRATA_NEG<"		;	TRATA_NEG			<
4003 0000 ; "VOLTA_NEG<"		;	VOLTA_NEG 			<
4004 0000 ; "MM_VAZIA<"		;	MM_VAZIA			<
4005 0000 ; "LD_VAZIA<"		;	LD_VAZIA			<
4006 0000 ; "INC_ADDRESS<"		;	INC_ADDRESS 		<
4007 0000 ; "INCREASE<"		;	INCREASE			<
4008 0000 ; "INVALID_ADDR<"		;	INVALID_ADDR		<
4009 0000 ; "CH_1<"		;	CH_1				<
4010 0000 ; "CH_2<"		;	CH_2				<
4011 0000 ; "CH_3<"		;	CH_3				<
4012 0000 ; "CH_4<"		;	CH_4				<
4013 0000 ; "CH_5<"		;	CH_5 				<
4014 0000 ; "CH_6<"		;	CH_6 				<
4015 0000 ; "CH_E<"		;	CH_E				<
	
; Subrotina PACK ===============================================================================
; Recebe o endereço de duas palavras e retorna no Acumulador a composição entre as duas

; Variáveis de PACK
8000 0000		;	PACK_VAR1   K /0000     ; Variavel do programa
8002 0000		;	PACK_VAR2   K /0000     ; Variavel do programa
; Corpo de PACK
8004 0000		;	PACK        K /0000             ; Sub-rotina PACK
a006 8000		;				LD      PACK_VAR1   ; Recebe o endereco de IN1 (conteudo de PACK_VAR1)
d008 4005		;				+       LD_VAZIA     ; Soma com (8000H)
a00a 900c		;				MM      PACK_X      ; Salva no proximo endereco de memoria
800c 0000		;	PACK_X      K       /0000       ; Executa a instrucao recem-montada
d00e 6000		;				*       SHIFT2      ; Multiplica por 100H
a010 9000		;				MM      PACK_VAR1   ; Salva na memoria PACK_VAR1
a012 8002		;				LD      PACK_VAR2   ; Recebe o endereco de IN2 (conteudo de PACK_VAR2)
d014 4005		;				+       LD_VAZIA    ; Soma com (8000H)
a016 9018		;				MM      PACK_Y      ; Salva no proximo endereco de memoria
8018 0000		;	PACK_Y      K       /0000       ; Executa a instrucao recem-montada
a01a 4000		;				+       PACK_VAR1   ; Soma com o conteudo de PACK_VAR1
a01c b004		;				RS      PACK        ; Fim da sub-rotina 


; Subrotina UNPACK =============================================================================
; Subrotina que desempacota a palavra presente no Acumulador e salva as palavras resultantes nos
; endereço armazenado em UNPACK_W1 e UNPACK_W2

;Variáveis de UNPACK
801e 0000		;	UNPACK_OUT_ADDR1  	K       /0000       	; Endereço de saída da primeira palavra 
8020 0000		;	UNPACK_OUT_ADDR2 	K       /0000       	; Endereço de saída da segunda palavra 
8022 0000		;	UNPACK_PACKAGE     	K       /0000       	; Word empacotada
8024 0000		;	UNPACK_W1          	K       /0000       	; Palavra 1 (2 primeiros digitos da original)
8026 0000		;	UNPACK_W2       	K       /0000       	; Palavra 2 (2 ultimos digitos da original)
8028 0000		;	UNPACK_W1_DESLOCADA K       /0000       	; A primeira palavra deslocada

;Corpo da subrotina
802a 0000		;	UNPACK      		K       /0000       			; Início da subrotina UNPACK (endereço reservado para retorno)
a02c 9022		;						MM      UNPACK_PACKAGE  		; Copia o contéudo do Acumulador para PACKAGE;
a02e 2056		;						JN      UNPACK_NEGATIVO 		; Se a palavra é um número negativo, pula para o caso NEGATIVO
d030 7000		;	UNPACK_POSITIVO    	/       SHIFT2 	    			; Se a palavra é positiva, divido por /100 para obter a primeira palavra no Acumulador
a032 9024		;						MM      UNPACK_W1 				; Copio a primeira palavra em W1;
a034 801e		;						LD      UNPACK_OUT_ADDR1		; Copio o endereço de saída da primeira palavra para o Acumulador
d036 4004		;						+       MM_VAZIA     			; Combina o endereço de saída da primeira palavra com a isntrução MM
a038 903c		;						MM      UNPACK_SALVA1   		; Tranfere a instrução completa para a posição SALVA1
a03a 8024		;						LD      UNPACK_W1       		; Copia o valor de W1 para o Acumulador
803c 0000		;	UNPACK_SALVA1      	K       /0000       			; Executa a instrução MM <valor contido em W1XADDRESS>, salvando a palavra 1 na posição de saída desejada
a03e 8024		;						LD      UNPACK_W1       		; Copia o valor de W1 para o Acumulador
d040 6000		;						*       SHIFT2 					; Multiplica a primeira palavra por /100 para deslocá-la duas posições para a direita
a042 9028		;						MM      UNPACK_W1_DESLOCADA 	; Salvo a palavra 1 deslocada em W1DESLOCADA
a044 8022		;						LD      UNPACK_PACKAGE     		; Copio a palavra empacotada para o Acumulador
a046 5028		;						-       UNPACK_W1_DESLOCADA 	; Subtraio os dois primeiros digitos da palavra empacotada para obter a segunda palavra
a048 9026		;						MM      UNPACK_W2          		; Copio a segunda palavra em W2;
a04a 8020		;						LD      UNPACK_OUT_ADDR2		; Copio o endereço de saída da segunda palavra para o Acumulador
d04c 4004		;						+       MM_VAZIA     			; Combina o endereço de saída da segunda palavra com a instrução MM
a04e 9052		;						MM      UNPACK_SALVA2      		; Tranfere a instrução completa para a posição SALVA1
a050 8026		;						LD      UNPACK_W2          		; Copia o valor de W2 para o Acumulador
8052 0000		;	UNPACK_SALVA2      	K       /0000       			; Executa a instrução MM <valor contido em W1XADDRESS>, salvando a palavra 1 na posição de saída desejada
a054 007e		;						JP      UNPACK_FIM 	    
d056 4002		;	UNPACK_NEGATIVO    	+       TRATA_NEG    			; Soma 8000 no numero negativo para poder tratar como positivo
d058 7000		;						/       SHIFT2 					; Divido por /100 para obter a primeira palavra passada para positiva no Acumulador
d05a 4003		;						+       VOLTA_NEG    			; Soma 80 para passar a primeira palavra para positiva
a05c 9024		;						MM      UNPACK_W1          		; Copio a primeira palavra em W1;
a05e 801e		;						LD      UNPACK_OUT_ADDR1  		; Copio o endereço de saída da primeira palavra para o Acumulador
d060 4004		;						+       MM_VAZIA     			; Combina o endereço de saída da primeira palavra com a isntrução MM
a062 9066		;						MM      UNPACK_SALVA3      		; Tranfere a instrução completa para a posição SALVA1
a064 8024		;						LD      UNPACK_W1          		; Copia o valor de W1 para o Acumulador
8066 0000		;	UNPACK_SALVA3      	K       /0000       			; Executa a instrução MM <valor contido em W1XADDRESS>, salvando a palavra 1 na posição de saída desejada
a068 8024		;						LD      UNPACK_W1         		; Copia o valor de W1 para o Acumulador
d06a 6000		;						*       SHIFT2		  			; Multiplica a primeira palavra por /100 para deslocá-la duas posições para a direita
a06c 9028		;						MM      UNPACK_W1_DESLOCADA 	; Salvo a palavra 1 deslocada em W1DESLOCADA
a06e 8022		;						LD      UNPACK_PACKAGE			; Copio a palavra empacotada para o Acumulador
a070 5028		;						-       UNPACK_W1_DESLOCADA 	; Subtraio os dois primeiros digitos da palavra empacotada para obter a segunda palavra
a072 9026		;						MM      UNPACK_W2          		; Copio a segunda palavra em W2;
a074 8020		;						LD      UNPACK_OUT_ADDR2  		; Copio o endereço de saída da segunda palavra para o Acumulador
d076 4004		;						+       MM_VAZIA     			; Combina o endereço de saída da segunda palavra com a instrução MM
a078 907c		;						MM      UNPACK_SALVA4      		; Tranfere a instrução completa para a posição SALVA1
a07a 8026		;						LD      UNPACK_W2          		; Copia o valor de W2 para o Acumulador
807c 0000		;	UNPACK_SALVA4      	K       /0000       			; Executa a instrução MM <valor contido em W1XADDRESS>, salvando a palavra 1 na posição de saída desejada
a07e b02a		;	UNPACK_FIM	 		RS      UNPACK      			; Retorno da subrotina


; Subrotina MEMCOPY =============================================================================
; Subrotina que copia uma sequência de tamanho arbitrário de bytes da 
; memória de uma posição em outra. Retorna 0000 no Acumulador em caso de 
; sucesso e FFFF em caso de erro

;Variáveis da Subrotina
8080 0000		;	MEMCOPY_NWORDS 				K		/0000					; Número de palavras a serem copiadas (cópia da subrotina)
8082 0000		;	MEMCOPY_END_ORIGEM			K		/0000					; Endereço inicial da sequência de origem (cópia da subrotina)
8084 0000		;	MEMCOPY_END_DESTINO			K		/0000					; Endereço inicial da sequência de destino (cópia da subrotina)
8086 0000		;	MEMCOPY_ORIGEM_ATUAL		K		/0000					; Endereço atual que eu estou lendo	
8088 0000		;	MEMCOPY_DESTINO_ATUAL		K		/0000					; Endereço atual para onde estou copiando
808a 0000		;	MEMCOPY_CONTAGEM			K		/0000					; Número de palavras que ainda preciso copiar
808c 0000		;	MEMCOPY_OK					K		/0000					; Código de retorno de funcionamento correto
808e ffff		;	MEMCOPY_ERRO 				K		/FFFF					; Código de retorno de caso de erro 
8090 0000		;	MEMCOPY_COPIANDO 			K		/0000					; Dado que está sendo copiado
8092 0000		;	MEMCOPY_RETORNO				K		/0000					; Retorno da subrotina

;Corpo da Subrotina
8094 0000		;	MEMCOPY						K 		/0000					; Início da subrotina MEMCOPY (endereço reservado para retorno)
							; Tratando erros	
a096 8082		;	MEMCOPY_ERRO_CHK_1			LD      MEMCOPY_END_ORIGEM 		; Copio o endereço de origem para o Acumulador
d098 5008		;								-		INVALID_ADDR			; Subtraio o endereço pelo primeiro endereço inválido 
a09a 20a0		;								JN		MEMCOPY_ERRO_CHK_2		; Se for negativo, o endereço é válido e pula para o segundo check
a09c 808e		;	MEMCOPY_ERRO_1_DETECTADO	LD 		MEMCOPY_ERRO            ; Se entrou aqui, o endereço é inválido. Copio o código de erro no Acumulador.
a09e 9092		;								MM 		MEMCOPY_RETORNO 		; Copio o código de erro em RETORNO
a0a0 8084		;	MEMCOPY_ERRO_CHK_2			LD      MEMCOPY_END_DESTINO  	; Copio o endereço de origem para o Acumulador
d0a2 5008		;								-		INVALID_ADDR			; Subtraio o endereço pelo primeiro endereço inválido 
a0a4 20aa		;								JN		MEMCOPY_ERRO_CHK_FIM	; Se for negativo, o endereço é válido
a0a6 808e		;	MEMCOPY_ERRO_2_DETECTADO	LD 		MEMCOPY_ERRO            ; Se entrou aqui, o endereço é inválido. Copio o código de erro no Acumulador.
a0a8 9092		;								MM 		MEMCOPY_RETORNO 		; Copio o código de erro em RETORNO
a0aa 8092		;	MEMCOPY_ERRO_CHK_FIM		LD 		MEMCOPY_RETORNO         ; Carrego RETORNO no Acumulador
a0ac 10b0		;								JZ		MEMCOPY_INICIO			; Se retorno = 0, continuo, senão pulo pro final
a0ae 00e6		;								JP		MEMCOPY_FIM		
							; Inicio colocando os valores iniciais das variáveis de controle
a0b0 8082		;	MEMCOPY_INICIO				LD      MEMCOPY_END_ORIGEM  	; Copio o endereço de origem para o Acumulador
a0b2 9086		;								MM 		MEMCOPY_ORIGEM_ATUAL   	; Copio o endereço de origem para endereço que estou lendo
a0b4 8084		;								LD      MEMCOPY_END_DESTINO 	; Copio o endereço de destino para o Acumulador
a0b6 9088		;								MM 		MEMCOPY_DESTINO_ATUAL   ; Copio o endereço de destino para endereço que estou lendo
							;Inicia contagem			
a0b8 8080		;								LD      MEMCOPY_NWORDS     		; Copio o número de palavras para o Acumulador
a0ba 908a		;								MM 		MEMCOPY_CONTAGEM    	; Copio o número de palavras para CONTAGEM
							; Loop de copias			
a0bc 10e6		;	MEMCOPY_LOOP 				JZ		MEMCOPY_FIM  			; Pula para fora do LOOP se CONTAGEM = 0
a0be 8086		;								LD 		MEMCOPY_ORIGEM_ATUAL   	; Copio o endereço atual a ser lido para o Acumulador
d0c0 4005		;								+		LD_VAZIA     			; Somo o endeço atual a ser lido com a instrução de LOAD, obtendo uma instrução que lê o valor atual
a0c2 90c4		;								MM		MEMCOPY_COPIA_ATUAL 	; Envio a instrução que lê o valor atual para COPIAATUAL
80c4 0000		;	MEMCOPY_COPIA_ATUAL			K 		/0000					; Executa instrução que lê o valor atual
a0c6 9090		;								MM 		MEMCOPY_COPIANDO    	; Copia o valor atual para COPIANDO
a0c8 8088		;								LD 		MEMCOPY_DESTINO_ATUAL   ; Copio o endereço atual de destino para o Acumulador
d0ca 4004		;								+		MM_VAZIA     			; Somo o endereço atual de destino com a instrução de MM, obtendo uma instrução que envia para o destino atual
a0cc 90d0		;								MM		MEMCOPY_ENVIA_ATUAL 	; Envio a instrução que envia para o destino atual para ENVIAATUAL
a0ce 8090		;								LD 		MEMCOPY_COPIANDO    	; Copio o valor atual para o Acumulador
80d0 0000		;	MEMCOPY_ENVIA_ATUAL			K 		/0000					; Executa instrução que envia para o destino atual
							;Incrementando os endereços e decrementando a CONTAGEM
a0d2 8086		;								LD 		MEMCOPY_ORIGEM_ATUAL 	; Incremento o endereço de origem para pegar o próximo valor a ser copiado  
d0d4 4006		;								+ 		INC_ADDRESS
a0d6 9086		;								MM      MEMCOPY_ORIGEM_ATUAL 
a0d8 8088		;								LD 		MEMCOPY_DESTINO_ATUAL   ; Incremento o endeço de destino para que a cópia ocupa a próxima posição da sequencia
d0da 4006		;								+ 		INC_ADDRESS
a0dc 9088		;								MM      MEMCOPY_DESTINO_ATUAL
a0de 808a		;								LD 		MEMCOPY_CONTAGEM		; Decremento a contagem de palavras que faltam copiar
d0e0 5007		;								- 		INCREASE 				
a0e2 908a		;								MM 		MEMCOPY_CONTAGEM
a0e4 00bc		;								JP		MEMCOPY_LOOP 			; Retorna ao Inicio do LOOP 
a0e6 8092		;	MEMCOPY_FIM					LD 		MEMCOPY_RETORNO			; Coloco o valor de RETORNO no Acumulador
a0e8 b094		;								RS 		MEMCOPY					; Retorno da subrotina

; Subrotina CHTOI  =============================================================================
; Subrotina que converte duas words contendo caracteres ASCII hexadecimais para o numero inteiro
; correspondente.

; Variaveis de CHTOI
80ea 0000		;	CHTOI_IN1		 	K       /0000       	; Endereço de entrada da primeira palavra 
80ec 0000		;	CHTOI_IN2 			K       /0000       	; Endereço de entrada da segunda palavra
80ee 0000		;	CHTOI_WORD	     	K       /0000       	; Word final
80f0 0000		;	CHTOI_AUX 			K		/0000			; Variavel auxiliar (guarda o endereco das variavels CHTOI_DX)
80f2 0000		;	CHTOI_D 			K 		/0000			; Variavel auxiliar (guarda o valor a ser salvo)
80f4 0000		;	CHTOI_D1          	K       /0000       	; Digito 1 
80f6 0000		;	CHTOI_D2  	     	K       /0000       	; Digito 2 
80f8 0000		;	CHTOI_D3  	     	K       /0000       	; Digito 3 
80fa 0000		;	CHTOI_D4  	     	K       /0000       	; Digito 4 

; Corpo da subrotina
80fc 0000		;	CHTOI 						K		/0000					; Inicio da subrotina CHTOI (endereco reservado para retorno)
a0fe 30f4		;								LV 		CHTOI_D1 				; Guarda o endereco de CHTOI_D1 no Acumulador
a100 901e		;								MM      UNPACK_OUT_ADDR1		; a Primeira saida de UNPACK sera salva em CHTOI_D1
a102 30f6		;								LV   	CHTOI_D2 				;
a104 9020		;								MM 		UNPACK_OUT_ADDR2 		; a Segunda saida de UNPACK sera salva em CHTOI_D2
a106 80ea		;								LD 		CHTOI_IN1				; recebe o endereço da primeira palavra
d108 4005		;								+ 		LD_VAZIA				; Montagem de instrucao dinamica
a10a 910c		;								MM 		WORD1					;
810c 0000		;	WORD1 						K 		/0000					; Carrega o valor da primeira palavra no Acumulador
a10e a02a		;								SC 		UNPACK 					; Execucao da subrotina UNPACK, para separar a palavra
a110 30f8		;								LV 		CHTOI_D3 				; Repeticao do processo para a segunda palavra
a112 901e		;								MM      UNPACK_OUT_ADDR1
a114 30fa		;								LV   	CHTOI_D4
a116 9020		;								MM 		UNPACK_OUT_ADDR2
a118 80ec		;								LD 		CHTOI_IN2				;
d11a 4005		;								+ 		LD_VAZIA
a11c 911e		;								MM 		WORD2
811e 0000		;	WORD2 						K 		/0000
a120 a02a		;								SC 		UNPACK
; Inicio das conversoes de hexa para inteiros
a122 30f4		;	CHTOI_DIG1					LV 		CHTOI_D1 				; Endereço de CHTOI_D1 para Acumulador
a124 90f0		;								MM 		CHTOI_AUX 				; Salva o endereço de CHTOI_D1 em CHTOI_AUX
a126 80f4		;								LD 		CHTOI_D1 				; Carrega o valor de CHTOI_D1 no Acumulador
a128 0142		;								JP		CHTOI_TESTE 			; Jump para CHTOI_TESTE
a12a 30f6		;	CHTOI_DIG2					LV 		CHTOI_D2 				; Analogo a CHTOI_DIG1
a12c 90f0		;								MM 		CHTOI_AUX
a12e 80f6		;								LD 		CHTOI_D2
a130 0142		;								JP		CHTOI_TESTE
a132 30f8		;	CHTOI_DIG3					LV 		CHTOI_D3 				; Analogo a CHTOI_DIG1
a134 90f0		;								MM 		CHTOI_AUX
a136 80f8		;								LD 		CHTOI_D3
a138 0142		;								JP		CHTOI_TESTE
a13a 30fa		;	CHTOI_DIG4					LV 		CHTOI_D4 				; Analogo a CHTOI_DIG1
a13c 90f0		;								MM 		CHTOI_AUX
a13e 80fa		;								LD 		CHTOI_D4
a140 0142		;								JP		CHTOI_TESTE
d142 5009		;	CHTOI_TESTE					-		CH_1 					; Subtrai-se 0040H para verificar se o digito esta entre 30-3F ou 41-46
a144 11b0		;								JZ		CHTOI_ERRO				; Se o digito 40H, o caracter é inválido
a146 214e		;								JN		CHTOI_0F				; Se o resultado no acumulador for negativo, o digito esta entre 30-3F
d148 5011		;								-		CH_3 					; Senao, o digito eh maior que 41, subtrai-se 0007H
a14a 2164		;								JN		CHTOI_AF 				; Se o resultado for negativo, esta entre 41 e 46 (ou seja, esta entre A-F em ASCII)
a14c 01b0		;								JP		CHTOI_ERRO 				; Senao eh caracter invalido
d14e 4010		;	CHTOI_0F					+		CH_2 					; Soma-se 0006H
a150 2154		;								JN		CHTOI_09 				; Se o resultado for negativo, esta entre 0-9 (ASCII)
a152 01b0		;								JP		CHTOI_ERRO				; Senao eh caracter invalido (esta entre 3A-3F)
d154 5010		;	CHTOI_09					-		CH_2 					; Subtrai-se o valor 0006H que foi adicionado anteriormente
d156 4012		;								+		CH_4 					; Soma-se 0010H e obtem-se o inteiro de 0 a 9
a158 90f2		;								MM 		CHTOI_D 				; Salva o resultado em CHTOI_D
a15a 80f0		;								LD 		CHTOI_AUX 				; Carrega o endereço salvo em CHTOI_AUX
d15c 4004		;								+ 		MM_VAZIA 				; Montagem de instrucao dinamica (Salvar o resultado na memoria do digito)
a15e 9172		;								MM 		CHTOI_SAVE 				
a160 80f2		;								LD 		CHTOI_D
a162 0172		;								JP		CHTOI_SAVE
d164 4012		;	CHTOI_AF					+		CH_4 					; Soma-se 0010H e obtem-se o inteiro de A-F
a166 90f2		;								MM 		CHTOI_D 				; Salva o resultado em CHTOI_D
a168 80f0		;								LD 		CHTOI_AUX				; Carrega o endereço salvo em CHTOI_AUX
d16a 4004		;								+ 		MM_VAZIA 				; Montagem de instrucao dinamica (Salvar o resultado na memoria do digito)
a16c 9172		;								MM 		CHTOI_SAVE
a16e 80f2		;								LD 		CHTOI_D
a170 0172		;								JP		CHTOI_SAVE
8172 0000		;	CHTOI_SAVE					K 		/0000 					; Executa a instrução montada dinamicamente (Salvar o dado presente no acumulador nas variaveis CHTOI_Dx)
a174 30f4		;								LV 		CHTOI_D1 				; Carrega o endereco de CHTOI_D1
a176 50f0		;								- 		CHTOI_AUX				; Se for igual ao salvo em CHTOI_AUX,
a178 112a		;								JZ 		CHTOI_DIG2				; Executa-se CHTOI_DIG2
a17a 30f6		;								LV 		CHTOI_D2 				; Carrega o endereco de CHTOI_D2
a17c 50f0		;								- 		CHTOI_AUX 				; Se for igual ao salvo em CHTOI_AUX,
a17e 1132		;								JZ 		CHTOI_DIG3				; Executa-se CHTOI_DIG3
a180 30f8		;								LV 		CHTOI_D3 				; Carrega o endereco de CHTOI_D3
a182 50f0		;								- 		CHTOI_AUX 				; Se for igual ao salvo em CHTOI_AUX,
a184 113a		;								JZ 		CHTOI_DIG4	 			; Executa-se CHTOI_DIG4
a186 30fa		;								LV 		CHTOI_D4 				; Carrega o endereco de CHTOI_D4
a188 50f0		;								- 		CHTOI_AUX 				; Se for igual ao salvo em CHTOI_AUX,
a18a 118c		;								JZ 		CHTOI_FIM 				; Executa-se CHTOI_FIM
818c 3000		;	CHTOI_FIM					LV    	/0000					; Carrego o valor 0
a18e 90ee		;								MM      CHTOI_WORD				; Coloco inicialmente 0 na saída
a190 80f4		;								LD 		CHTOI_D1 				; Carrega o primeiro digito
d192 6014		;								* 		CH_6 					; Multiplica por 1000H
a194 40ee		;								+ 		CHTOI_WORD 				; Soma-se com a variavel de saida
a196 90ee		;								MM 		CHTOI_WORD				; Armazena o resultado
a198 80f6		;								LD 		CHTOI_D2 				; Carrega o segundo digito
d19a 6013		;								* 		CH_5 					; Multiplica por 0100H
a19c 40ee		;								+		CHTOI_WORD 				; Soma-se com a variavel de saida
a19e 90ee		;								MM 		CHTOI_WORD 				; Armazena o resultado
a1a0 80f8		;								LD 		CHTOI_D3 				; Carrega o terceiro digito
d1a2 6012		;								* 		CH_4 					; Multiplica por 0010H
a1a4 40ee		;								+ 		CHTOI_WORD 				; Soma-se com a variavel de saida
a1a6 90ee		;								MM 		CHTOI_WORD 				; Armazena o resultado
a1a8 80fa		;								LD 		CHTOI_D4 				; Carrega o quarto digito
a1aa 40ee		;								+ 		CHTOI_WORD 				; Soma-se com a variavel de saida
a1ac 90ee		;								MM 		CHTOI_WORD 				; Salva o resultado
a1ae b0fc		;								RS 		CHTOI 					; Saida da subrotina
d1b0 8015		;	CHTOI_ERRO					LD 		CH_E 					; Carrega /FFFF (indica erro) no acumulador
a1b2 b0fc		;								RS 		CHTOI 					; Sai do programa
