; T3G11A03E01_rotinas_12.asm
; Arquivo que contém as rotinas desenvolvidas nas aulas anteriores
				;						&       /0000
;Exportando PACK  ==================================================================
2004 0000 ; "PACK>"		;	PACK        		>           ; Sub-rotina PACK
2000 0000 ; "PACK_VAR1>"		;	PACK_VAR1   		>           ; Endereço da primeira palavra a ser empacotada
2002 0000 ; "PACK_VAR2>"		;	PACK_VAR2   		>           ; Endereço da segunda palabra a ser empacotada

;Exportando UNPACK  =======================================================================
201e 0000 ; "UNPACK_OUT_ADDR1>"		;	UNPACK_OUT_ADDR1  	>	     	; Endereço de saída da primeira palavra 
2020 0000 ; "UNPACK_OUT_ADDR2>"		;	UNPACK_OUT_ADDR2 	>       	; Endereço de saída da segunda palavra 
2022 0000 ; "UNPACK_PACKAGE>"		;	UNPACK_PACKAGE     	>         	; Word empacotada

;Exportando MEMCOPY =======================================================================
2080 0000 ; "MEMCOPY_NWORDS>"		;	MEMCOPY_NWORDS 		> 			; Número de palavras a serem copiadas (cópia da subrotina)
2082 0000 ; "MEMCOPY_END_ORIGEM>"		;	MEMCOPY_END_ORIGEM	>			; Endereço inicial da sequência de origem (cópia da subrotina)
2084 0000 ; "MEMCOPY_END_DESTINO>"		;	MEMCOPY_END_DESTINO	>			; Endereço inicial da sequência de destino (cópia da subrotina)

;Importando constantes ===========================================================
4000 0000 ; "SHIFT2<"		;	SHIFT2	    		<           ; Constante que desloca em 2 posições os bits das palavras
4001 0000 ; "LD_VAZIA<"		;	LD_VAZIA     		<           ; Instrução
4002 0000 ; "TRATA_NEG<"		;	TRATA_NEG			<
4003 0000 ; "VOLTA_NEG<"		;	VOLTA_NEG 			<
4004 0000 ; "MM_VAZIA<"		;	MM_VAZIA			<
4005 0000 ; "LD_VAZIA<"		;	LD_VAZIA			<
4006 0000 ; "INC_ADDRESS<"		;	INC_ADDRESS 		<
4007 0000 ; "INCREASE<"		;	INCREASE			<
4008 0000 ; "INVALID_ADDR<"		;	INVALID_ADDR		<	
	
; Subrotina PACK ===============================================================================
; Recebe o endereço de duas palavras e retorna no Acumulador a composição entre as duas

; Variáveis de PACK
8000 0000		;	PACK_VAR1   K /0000     ; Variavel do programa
8002 0000		;	PACK_VAR2   K /0000     ; Variavel do programa
; Corpo de PACK
8004 0000		;	PACK        K /0000             ; Sub-rotina PACK
a006 8000		;				LD      PACK_VAR1   ; Recebe o endereco de IN1 (conteudo de PACK_VAR1)
d008 4005		;				+       LD_VAZIA     ; Soma com (8000H)
a00a 900c		;				MM      PACK_X      ; Salva no proximo endereco de memoria
800c 0000		;	PACK_X      K       /0000       ; Executa a instrucao recem-montada
d00e 6000		;				*       SHIFT2      ; Multiplica por 100H
a010 9000		;				MM      PACK_VAR1   ; Salva na memoria PACK_VAR1
a012 8002		;				LD      PACK_VAR2   ; Recebe o endereco de IN2 (conteudo de PACK_VAR2)
d014 4005		;				+       LD_VAZIA    ; Soma com (8000H)
a016 9018		;				MM      PACK_Y      ; Salva no proximo endereco de memoria
8018 0000		;	PACK_Y      K       /0000       ; Executa a instrucao recem-montada
a01a 4000		;				+       PACK_VAR1   ; Soma com o conteudo de PACK_VAR1
a01c b004		;				RS      PACK        ; Fim da sub-rotina 


; Subrotina UNPACK =============================================================================
; Subrotina que desempacota a palavra presente no Acumulador e salva as palavras resultantes nos
; endereço armazenado em UNPACK_W1 e UNPACK_W2

;Variáveis de UNPACK
801e 0000		;	UNPACK_OUT_ADDR1  	K       /0000       	; Endereço de saída da primeira palavra 
8020 0000		;	UNPACK_OUT_ADDR2 	K       /0000       	; Endereço de saída da segunda palavra 
8022 0000		;	UNPACK_PACKAGE     	K       /0000       	; Word empacotada
8024 0000		;	UNPACK_W1          	K       /0000       	; Palavra 1 (2 primeiros digitos da original)
8026 0000		;	UNPACK_W2       	K       /0000       	; Palavra 2 (2 ultimos digitos da original)
8028 0000		;	UNPACK_W1_DESLOCADA K       /0000       	; A primeira palavra deslocada

;Corpo da subrotina
802a 0000		;	UNPACK      		K       /0000       			; Início da subrotina UNPACK (endereço reservado para retorno)
a02c 9022		;						MM      UNPACK_PACKAGE  		; Copia o contéudo do Acumulador para PACKAGE;
a02e 2056		;						JN      UNPACK_NEGATIVO 		; Se a palavra é um número negativo, pula para o caso NEGATIVO
d030 7000		;	UNPACK_POSITIVO    	/       SHIFT2 	    			; Se a palavra é positiva, divido por /100 para obter a primeira palavra no Acumulador
a032 9024		;						MM      UNPACK_W1 				; Copio a primeira palavra em W1;
a034 801e		;						LD      UNPACK_OUT_ADDR1		; Copio o endereço de saída da primeira palavra para o Acumulador
d036 4004		;						+       MM_VAZIA     			; Combina o endereço de saída da primeira palavra com a isntrução MM
a038 903c		;						MM      UNPACK_SALVA1   		; Tranfere a instrução completa para a posição SALVA1
a03a 8024		;						LD      UNPACK_W1       		; Copia o valor de W1 para o Acumulador
803c 0000		;	UNPACK_SALVA1      	K       /0000       			; Executa a instrução MM <valor contido em W1XADDRESS>, salvando a palavra 1 na posição de saída desejada
a03e 8024		;						LD      UNPACK_W1       		; Copia o valor de W1 para o Acumulador
d040 6000		;						*       SHIFT2 					; Multiplica a primeira palavra por /100 para deslocá-la duas posições para a direita
a042 9028		;						MM      UNPACK_W1_DESLOCADA 	; Salvo a palavra 1 deslocada em W1DESLOCADA
a044 8022		;						LD      UNPACK_PACKAGE     		; Copio a palavra empacotada para o Acumulador
a046 5028		;						-       UNPACK_W1_DESLOCADA 	; Subtraio os dois primeiros digitos da palavra empacotada para obter a segunda palavra
a048 9026		;						MM      UNPACK_W2          		; Copio a segunda palavra em W2;
a04a 8020		;						LD      UNPACK_OUT_ADDR2		; Copio o endereço de saída da segunda palavra para o Acumulador
d04c 4004		;						+       MM_VAZIA     			; Combina o endereço de saída da segunda palavra com a instrução MM
a04e 9052		;						MM      UNPACK_SALVA2      		; Tranfere a instrução completa para a posição SALVA1
a050 8026		;						LD      UNPACK_W2          		; Copia o valor de W2 para o Acumulador
8052 0000		;	UNPACK_SALVA2      	K       /0000       			; Executa a instrução MM <valor contido em W1XADDRESS>, salvando a palavra 1 na posição de saída desejada
a054 007e		;						JP      UNPACK_FIM 	    
d056 4002		;	UNPACK_NEGATIVO    	+       TRATA_NEG    			; Soma 8000 no numero negativo para poder tratar como positivo
d058 7000		;						/       SHIFT2 					; Divido por /100 para obter a primeira palavra passada para positiva no Acumulador
d05a 4003		;						+       VOLTA_NEG    			; Soma 80 para passar a primeira palavra para positiva
a05c 9024		;						MM      UNPACK_W1          		; Copio a primeira palavra em W1;
a05e 801e		;						LD      UNPACK_OUT_ADDR1  		; Copio o endereço de saída da primeira palavra para o Acumulador
d060 4004		;						+       MM_VAZIA     			; Combina o endereço de saída da primeira palavra com a isntrução MM
a062 9066		;						MM      UNPACK_SALVA3      		; Tranfere a instrução completa para a posição SALVA1
a064 8024		;						LD      UNPACK_W1          		; Copia o valor de W1 para o Acumulador
8066 0000		;	UNPACK_SALVA3      	K       /0000       			; Executa a instrução MM <valor contido em W1XADDRESS>, salvando a palavra 1 na posição de saída desejada
a068 8024		;						LD      UNPACK_W1         		; Copia o valor de W1 para o Acumulador
d06a 6000		;						*       SHIFT2		  			; Multiplica a primeira palavra por /100 para deslocá-la duas posições para a direita
a06c 9028		;						MM      UNPACK_W1_DESLOCADA 	; Salvo a palavra 1 deslocada em W1DESLOCADA
a06e 8022		;						LD      UNPACK_PACKAGE			; Copio a palavra empacotada para o Acumulador
a070 5028		;						-       UNPACK_W1_DESLOCADA 	; Subtraio os dois primeiros digitos da palavra empacotada para obter a segunda palavra
a072 9026		;						MM      UNPACK_W2          		; Copio a segunda palavra em W2;
a074 8020		;						LD      UNPACK_OUT_ADDR2  		; Copio o endereço de saída da segunda palavra para o Acumulador
d076 4004		;						+       MM_VAZIA     			; Combina o endereço de saída da segunda palavra com a instrução MM
a078 907c		;						MM      UNPACK_SALVA4      		; Tranfere a instrução completa para a posição SALVA1
a07a 8026		;						LD      UNPACK_W2          		; Copia o valor de W2 para o Acumulador
807c 0000		;	UNPACK_SALVA4      	K       /0000       			; Executa a instrução MM <valor contido em W1XADDRESS>, salvando a palavra 1 na posição de saída desejada
a07e b02a		;	UNPACK_FIM	 		RS      UNPACK      			; Retorno da subrotina


; Subrotina MEMCOPY =============================================================================
; Subrotina que copia uma sequência de tamanho arbitrário de bytes da 
; memória de uma posição em outra. Retorna 0000 no Acumulador em caso de 
; sucesso e FFFF em caso de erro

;Variáveis da Subrotina
8080 0000		;	MEMCOPY_NWORDS 				K		/0000					; Número de palavras a serem copiadas (cópia da subrotina)
8082 0000		;	MEMCOPY_END_ORIGEM			K		/0000					; Endereço inicial da sequência de origem (cópia da subrotina)
8084 0000		;	MEMCOPY_END_DESTINO			K		/0000					; Endereço inicial da sequência de destino (cópia da subrotina)
8086 0000		;	MEMCOPY_ORIGEM_ATUAL		K		/0000					; Endereço atual que eu estou lendo	
8088 0000		;	MEMCOPY_DESTINO_ATUAL		K		/0000					; Endereço atual para onde estou copiando
808a 0000		;	MEMCOPY_CONTAGEM			K		/0000					; Número de palavras que ainda preciso copiar
808c 0000		;	MEMCOPY_OK					K		/0000					; Código de retorno de funcionamento correto
808e ffff		;	MEMCOPY_ERRO 				K		/FFFF					; Código de retorno de caso de erro 
8090 0000		;	MEMCOPY_COPIANDO 			K		/0000					; Dado que está sendo copiado
8092 0000		;	MEMCOPY_RETORNO				K		/0000					; Retorno da subrotina

;Corpo da Subrotina
8094 0000		;	MEMCOPY						K 		/0000					; Início da subrotina MEMCOPY (endereço reservado para retorno)
							; Tratando erros	
a096 8082		;	MEMCOPY_ERRO_CHK_1			LD      MEMCOPY_END_ORIGEM 		; Copio o endereço de origem para o Acumulador
d098 5008		;								-		INVALID_ADDR			; Subtraio o endereço pelo primeiro endereço inválido 
a09a 20a0		;								JN		MEMCOPY_ERRO_CHK_2		; Se for negativo, o endereço é válido e pula para o segundo check
a09c 808e		;	MEMCOPY_ERRO_1_DETECTADO	LD 		MEMCOPY_ERRO            ; Se entrou aqui, o endereço é inválido. Copio o código de erro no Acumulador.
a09e 9092		;								MM 		MEMCOPY_RETORNO 		; Copio o código de erro em RETORNO
a0a0 8084		;	MEMCOPY_ERRO_CHK_2			LD      MEMCOPY_END_DESTINO  	; Copio o endereço de origem para o Acumulador
d0a2 5008		;								-		INVALID_ADDR			; Subtraio o endereço pelo primeiro endereço inválido 
a0a4 20aa		;								JN		MEMCOPY_ERRO_CHK_FIM	; Se for negativo, o endereço é válido
a0a6 808e		;	MEMCOPY_ERRO_2_DETECTADO	LD 		MEMCOPY_ERRO            ; Se entrou aqui, o endereço é inválido. Copio o código de erro no Acumulador.
a0a8 9092		;								MM 		MEMCOPY_RETORNO 		; Copio o código de erro em RETORNO
a0aa 8092		;	MEMCOPY_ERRO_CHK_FIM		LD 		MEMCOPY_RETORNO         ; Carrego RETORNO no Acumulador
a0ac 10b0		;								JZ		MEMCOPY_INICIO			; Se retorno = 0, continuo, senão pulo pro final
a0ae 00e6		;								JP		MEMCOPY_FIM		
							; Inicio colocando os valores iniciais das variáveis de controle
a0b0 8082		;	MEMCOPY_INICIO				LD      MEMCOPY_END_ORIGEM  	; Copio o endereço de origem para o Acumulador
a0b2 9086		;								MM 		MEMCOPY_ORIGEM_ATUAL   	; Copio o endereço de origem para endereço que estou lendo
a0b4 8084		;								LD      MEMCOPY_END_DESTINO 	; Copio o endereço de destino para o Acumulador
a0b6 9088		;								MM 		MEMCOPY_DESTINO_ATUAL   ; Copio o endereço de destino para endereço que estou lendo
							;Inicia contagem			
a0b8 8080		;								LD      MEMCOPY_NWORDS     		; Copio o número de palavras para o Acumulador
a0ba 908a		;								MM 		MEMCOPY_CONTAGEM    	; Copio o número de palavras para CONTAGEM
							; Loop de copias			
a0bc 10e6		;	MEMCOPY_LOOP 				JZ		MEMCOPY_FIM  			; Pula para fora do LOOP se CONTAGEM = 0
a0be 8086		;								LD 		MEMCOPY_ORIGEM_ATUAL   	; Copio o endereço atual a ser lido para o Acumulador
d0c0 4005		;								+		LD_VAZIA     			; Somo o endeço atual a ser lido com a instrução de LOAD, obtendo uma instrução que lê o valor atual
a0c2 90c4		;								MM		MEMCOPY_COPIA_ATUAL 	; Envio a instrução que lê o valor atual para COPIAATUAL
80c4 0000		;	MEMCOPY_COPIA_ATUAL			K 		/0000					; Executa instrução que lê o valor atual
a0c6 9090		;								MM 		MEMCOPY_COPIANDO    	; Copia o valor atual para COPIANDO
a0c8 8088		;								LD 		MEMCOPY_DESTINO_ATUAL   ; Copio o endereço atual de destino para o Acumulador
d0ca 4004		;								+		MM_VAZIA     			; Somo o endereço atual de destino com a instrução de MM, obtendo uma instrução que envia para o destino atual
a0cc 90d0		;								MM		MEMCOPY_ENVIA_ATUAL 	; Envio a instrução que envia para o destino atual para ENVIAATUAL
a0ce 8090		;								LD 		MEMCOPY_COPIANDO    	; Copio o valor atual para o Acumulador
80d0 0000		;	MEMCOPY_ENVIA_ATUAL			K 		/0000					; Executa instrução que envia para o destino atual
							;Incrementando os endereços e decrementando a CONTAGEM
a0d2 8086		;								LD 		MEMCOPY_ORIGEM_ATUAL 	; Incremento o endereço de origem para pegar o próximo valor a ser copiado  
d0d4 4006		;								+ 		INC_ADDRESS
a0d6 9086		;								MM      MEMCOPY_ORIGEM_ATUAL 
a0d8 8088		;								LD 		MEMCOPY_DESTINO_ATUAL   ; Incremento o endeço de destino para que a cópia ocupa a próxima posição da sequencia
d0da 4006		;								+ 		INC_ADDRESS
a0dc 9088		;								MM      MEMCOPY_DESTINO_ATUAL
a0de 808a		;								LD 		MEMCOPY_CONTAGEM		; Decremento a contagem de palavras que faltam copiar
d0e0 5007		;								- 		INCREASE 				
a0e2 908a		;								MM 		MEMCOPY_CONTAGEM
a0e4 00bc		;								JP		MEMCOPY_LOOP 			; Retorna ao Inicio do LOOP 
a0e6 8092		;	MEMCOPY_FIM					LD 		MEMCOPY_RETORNO			; Coloco o valor de RETORNO no Acumulador
a0e8 b094		;								RS 		MEMCOPY					; Retorno da subrotina
